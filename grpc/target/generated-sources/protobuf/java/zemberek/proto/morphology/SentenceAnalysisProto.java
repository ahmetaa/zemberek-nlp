// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: morphology.proto

package zemberek.proto.morphology;

/**
 * Protobuf type {@code zemberek.morphology.SentenceAnalysisProto}
 */
public  final class SentenceAnalysisProto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:zemberek.morphology.SentenceAnalysisProto)
    SentenceAnalysisProtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SentenceAnalysisProto.newBuilder() to construct.
  private SentenceAnalysisProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SentenceAnalysisProto() {
    input_ = "";
    results_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SentenceAnalysisProto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            input_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              results_ = new java.util.ArrayList<zemberek.proto.morphology.SentenceWordAnalysisProto>();
              mutable_bitField0_ |= 0x00000002;
            }
            results_.add(
                input.readMessage(zemberek.proto.morphology.SentenceWordAnalysisProto.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        results_ = java.util.Collections.unmodifiableList(results_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return zemberek.proto.morphology.Morphology.internal_static_zemberek_morphology_SentenceAnalysisProto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return zemberek.proto.morphology.Morphology.internal_static_zemberek_morphology_SentenceAnalysisProto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            zemberek.proto.morphology.SentenceAnalysisProto.class, zemberek.proto.morphology.SentenceAnalysisProto.Builder.class);
  }

  private int bitField0_;
  public static final int INPUT_FIELD_NUMBER = 1;
  private volatile java.lang.Object input_;
  /**
   * <pre>
   * input sentence
   * </pre>
   *
   * <code>string input = 1;</code>
   */
  public java.lang.String getInput() {
    java.lang.Object ref = input_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      input_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * input sentence
   * </pre>
   *
   * <code>string input = 1;</code>
   */
  public com.google.protobuf.ByteString
      getInputBytes() {
    java.lang.Object ref = input_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      input_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESULTS_FIELD_NUMBER = 2;
  private java.util.List<zemberek.proto.morphology.SentenceWordAnalysisProto> results_;
  /**
   * <pre>
   * for each token, result best morphological analysis and if requested, all
   * analyses.
   * </pre>
   *
   * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
   */
  public java.util.List<zemberek.proto.morphology.SentenceWordAnalysisProto> getResultsList() {
    return results_;
  }
  /**
   * <pre>
   * for each token, result best morphological analysis and if requested, all
   * analyses.
   * </pre>
   *
   * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
   */
  public java.util.List<? extends zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder> 
      getResultsOrBuilderList() {
    return results_;
  }
  /**
   * <pre>
   * for each token, result best morphological analysis and if requested, all
   * analyses.
   * </pre>
   *
   * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
   */
  public int getResultsCount() {
    return results_.size();
  }
  /**
   * <pre>
   * for each token, result best morphological analysis and if requested, all
   * analyses.
   * </pre>
   *
   * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
   */
  public zemberek.proto.morphology.SentenceWordAnalysisProto getResults(int index) {
    return results_.get(index);
  }
  /**
   * <pre>
   * for each token, result best morphological analysis and if requested, all
   * analyses.
   * </pre>
   *
   * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
   */
  public zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder getResultsOrBuilder(
      int index) {
    return results_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getInputBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, input_);
    }
    for (int i = 0; i < results_.size(); i++) {
      output.writeMessage(2, results_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getInputBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, input_);
    }
    for (int i = 0; i < results_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, results_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof zemberek.proto.morphology.SentenceAnalysisProto)) {
      return super.equals(obj);
    }
    zemberek.proto.morphology.SentenceAnalysisProto other = (zemberek.proto.morphology.SentenceAnalysisProto) obj;

    boolean result = true;
    result = result && getInput()
        .equals(other.getInput());
    result = result && getResultsList()
        .equals(other.getResultsList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INPUT_FIELD_NUMBER;
    hash = (53 * hash) + getInput().hashCode();
    if (getResultsCount() > 0) {
      hash = (37 * hash) + RESULTS_FIELD_NUMBER;
      hash = (53 * hash) + getResultsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zemberek.proto.morphology.SentenceAnalysisProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(zemberek.proto.morphology.SentenceAnalysisProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code zemberek.morphology.SentenceAnalysisProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:zemberek.morphology.SentenceAnalysisProto)
      zemberek.proto.morphology.SentenceAnalysisProtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zemberek.proto.morphology.Morphology.internal_static_zemberek_morphology_SentenceAnalysisProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zemberek.proto.morphology.Morphology.internal_static_zemberek_morphology_SentenceAnalysisProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zemberek.proto.morphology.SentenceAnalysisProto.class, zemberek.proto.morphology.SentenceAnalysisProto.Builder.class);
    }

    // Construct using zemberek.proto.morphology.SentenceAnalysisProto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getResultsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      input_ = "";

      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        resultsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return zemberek.proto.morphology.Morphology.internal_static_zemberek_morphology_SentenceAnalysisProto_descriptor;
    }

    @java.lang.Override
    public zemberek.proto.morphology.SentenceAnalysisProto getDefaultInstanceForType() {
      return zemberek.proto.morphology.SentenceAnalysisProto.getDefaultInstance();
    }

    @java.lang.Override
    public zemberek.proto.morphology.SentenceAnalysisProto build() {
      zemberek.proto.morphology.SentenceAnalysisProto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public zemberek.proto.morphology.SentenceAnalysisProto buildPartial() {
      zemberek.proto.morphology.SentenceAnalysisProto result = new zemberek.proto.morphology.SentenceAnalysisProto(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.input_ = input_;
      if (resultsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          results_ = java.util.Collections.unmodifiableList(results_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.results_ = results_;
      } else {
        result.results_ = resultsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof zemberek.proto.morphology.SentenceAnalysisProto) {
        return mergeFrom((zemberek.proto.morphology.SentenceAnalysisProto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(zemberek.proto.morphology.SentenceAnalysisProto other) {
      if (other == zemberek.proto.morphology.SentenceAnalysisProto.getDefaultInstance()) return this;
      if (!other.getInput().isEmpty()) {
        input_ = other.input_;
        onChanged();
      }
      if (resultsBuilder_ == null) {
        if (!other.results_.isEmpty()) {
          if (results_.isEmpty()) {
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureResultsIsMutable();
            results_.addAll(other.results_);
          }
          onChanged();
        }
      } else {
        if (!other.results_.isEmpty()) {
          if (resultsBuilder_.isEmpty()) {
            resultsBuilder_.dispose();
            resultsBuilder_ = null;
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000002);
            resultsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResultsFieldBuilder() : null;
          } else {
            resultsBuilder_.addAllMessages(other.results_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      zemberek.proto.morphology.SentenceAnalysisProto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (zemberek.proto.morphology.SentenceAnalysisProto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object input_ = "";
    /**
     * <pre>
     * input sentence
     * </pre>
     *
     * <code>string input = 1;</code>
     */
    public java.lang.String getInput() {
      java.lang.Object ref = input_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        input_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * input sentence
     * </pre>
     *
     * <code>string input = 1;</code>
     */
    public com.google.protobuf.ByteString
        getInputBytes() {
      java.lang.Object ref = input_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        input_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * input sentence
     * </pre>
     *
     * <code>string input = 1;</code>
     */
    public Builder setInput(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      input_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * input sentence
     * </pre>
     *
     * <code>string input = 1;</code>
     */
    public Builder clearInput() {
      
      input_ = getDefaultInstance().getInput();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * input sentence
     * </pre>
     *
     * <code>string input = 1;</code>
     */
    public Builder setInputBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      input_ = value;
      onChanged();
      return this;
    }

    private java.util.List<zemberek.proto.morphology.SentenceWordAnalysisProto> results_ =
      java.util.Collections.emptyList();
    private void ensureResultsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        results_ = new java.util.ArrayList<zemberek.proto.morphology.SentenceWordAnalysisProto>(results_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        zemberek.proto.morphology.SentenceWordAnalysisProto, zemberek.proto.morphology.SentenceWordAnalysisProto.Builder, zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder> resultsBuilder_;

    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public java.util.List<zemberek.proto.morphology.SentenceWordAnalysisProto> getResultsList() {
      if (resultsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(results_);
      } else {
        return resultsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public int getResultsCount() {
      if (resultsBuilder_ == null) {
        return results_.size();
      } else {
        return resultsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public zemberek.proto.morphology.SentenceWordAnalysisProto getResults(int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);
      } else {
        return resultsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder setResults(
        int index, zemberek.proto.morphology.SentenceWordAnalysisProto value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.set(index, value);
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder setResults(
        int index, zemberek.proto.morphology.SentenceWordAnalysisProto.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.set(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder addResults(zemberek.proto.morphology.SentenceWordAnalysisProto value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder addResults(
        int index, zemberek.proto.morphology.SentenceWordAnalysisProto value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(index, value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder addResults(
        zemberek.proto.morphology.SentenceWordAnalysisProto.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder addResults(
        int index, zemberek.proto.morphology.SentenceWordAnalysisProto.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder addAllResults(
        java.lang.Iterable<? extends zemberek.proto.morphology.SentenceWordAnalysisProto> values) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, results_);
        onChanged();
      } else {
        resultsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder clearResults() {
      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        resultsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public Builder removeResults(int index) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.remove(index);
        onChanged();
      } else {
        resultsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public zemberek.proto.morphology.SentenceWordAnalysisProto.Builder getResultsBuilder(
        int index) {
      return getResultsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder getResultsOrBuilder(
        int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);  } else {
        return resultsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public java.util.List<? extends zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder> 
         getResultsOrBuilderList() {
      if (resultsBuilder_ != null) {
        return resultsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(results_);
      }
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public zemberek.proto.morphology.SentenceWordAnalysisProto.Builder addResultsBuilder() {
      return getResultsFieldBuilder().addBuilder(
          zemberek.proto.morphology.SentenceWordAnalysisProto.getDefaultInstance());
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public zemberek.proto.morphology.SentenceWordAnalysisProto.Builder addResultsBuilder(
        int index) {
      return getResultsFieldBuilder().addBuilder(
          index, zemberek.proto.morphology.SentenceWordAnalysisProto.getDefaultInstance());
    }
    /**
     * <pre>
     * for each token, result best morphological analysis and if requested, all
     * analyses.
     * </pre>
     *
     * <code>repeated .zemberek.morphology.SentenceWordAnalysisProto results = 2;</code>
     */
    public java.util.List<zemberek.proto.morphology.SentenceWordAnalysisProto.Builder> 
         getResultsBuilderList() {
      return getResultsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        zemberek.proto.morphology.SentenceWordAnalysisProto, zemberek.proto.morphology.SentenceWordAnalysisProto.Builder, zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder> 
        getResultsFieldBuilder() {
      if (resultsBuilder_ == null) {
        resultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            zemberek.proto.morphology.SentenceWordAnalysisProto, zemberek.proto.morphology.SentenceWordAnalysisProto.Builder, zemberek.proto.morphology.SentenceWordAnalysisProtoOrBuilder>(
                results_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        results_ = null;
      }
      return resultsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:zemberek.morphology.SentenceAnalysisProto)
  }

  // @@protoc_insertion_point(class_scope:zemberek.morphology.SentenceAnalysisProto)
  private static final zemberek.proto.morphology.SentenceAnalysisProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new zemberek.proto.morphology.SentenceAnalysisProto();
  }

  public static zemberek.proto.morphology.SentenceAnalysisProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SentenceAnalysisProto>
      PARSER = new com.google.protobuf.AbstractParser<SentenceAnalysisProto>() {
    @java.lang.Override
    public SentenceAnalysisProto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SentenceAnalysisProto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SentenceAnalysisProto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SentenceAnalysisProto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public zemberek.proto.morphology.SentenceAnalysisProto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

